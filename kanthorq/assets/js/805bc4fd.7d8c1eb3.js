"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[921],{743:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=t(4848),s=t(8453);const i={title:"Consumer",sidebar_label:"Consumer",sidebar_position:3},r=void 0,l={id:"concepts/consumer",title:"Consumer",description:"Consumer is topic specific filter from a stream what store metadata about how an event in a stream is processed. With each event a consumer subscribes to, we spin up an consumer job for it an track what we did and what we will do with that event of the job",source:"@site/docs/concepts/003-consumer.md",sourceDirName:"concepts",slug:"/concepts/consumer",permalink:"/kanthorq/docs/concepts/consumer",draft:!1,unlisted:!1,editUrl:"https://github.com/kanthorlabs/kanthorq/tree/main/packages/create-docusaurus/templates/shared/docs/concepts/003-consumer.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Consumer",sidebar_label:"Consumer",sidebar_position:3},sidebar:"default",previous:{title:"Stream",permalink:"/kanthorq/docs/concepts/stream"},next:{title:"Advanced",permalink:"/kanthorq/docs/category/advanced"}},o={},d=[{value:"Job State",id:"job-state",level:2},{value:"Completed Flow",id:"completed-flow",level:3},{value:"Cancelled Flow",id:"cancelled-flow",level:3},{value:"Retryable &amp; Discarded Flow",id:"retryable--discarded-flow",level:3},{value:"Stuck Flow",id:"stuck-flow",level:3}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Consumer is topic specific filter from a stream what store metadata about how an event in a stream is processed. With each event a consumer subscribes to, we spin up an consumer job for it an track what we did and what we will do with that event of the job"}),"\n",(0,a.jsx)(n.h2,{id:"job-state",children:"Job State"}),"\n",(0,a.jsx)(n.p,{children:"There are 6 states a job can have:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Available"}),": is the state for jobs that are immediately eligible to be worked."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Discarded"}),": is the state for jobs that have errored enough times that they're no longer eligible to be retried. Manual user invention is required for them to be tried again."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Cancelled"}),": is the state for jobs that have been manually cancelled by user request."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Completed"})," is the state for jobs that have successfully run to completion."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Running"}),": is the state for jobs that are actively running."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Retryable"})," is the state for jobs that have errored, but will be retried."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"We can categorize them into three groups"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Initial States"}),": The beginning state of a job before picking up to process. Currently we only have one state for this group: ",(0,a.jsx)(n.code,{children:"Available"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Transitional States"}),": Jobs will stay at this state for awhile before to be transformed to another state (which maybe as same as the current state based on the business logic). We have ",(0,a.jsx)(n.code,{children:"Running"})," and ",(0,a.jsx)(n.code,{children:"Retryable"})," now."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Final States"}),": Once the job is moved into this state, it will stay at that state until user manually handle it. We have totally three state: ",(0,a.jsx)(n.code,{children:"Discarded"}),", ",(0,a.jsx)(n.code,{children:"Cancelled"})," and ",(0,a.jsx)(n.code,{children:"Completed"})]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: State Transition Flow\n---\nstateDiagram-v2\n    [*] --\x3e Available\n\n    Available --\x3e Running\n    Running --\x3e Completed\n\n    Running --\x3e Running\n\n    Running --\x3e Retryable\n    Retryable --\x3e Running\n    Retryable --\x3e Discarded\n\n    Available --\x3e Cancelled\n\n    Discarded --\x3e [*]\n    Cancelled --\x3e [*]\n    Completed --\x3e [*]"}),"\n",(0,a.jsx)(n.h3,{id:"completed-flow",children:"Completed Flow"}),"\n",(0,a.jsx)(n.p,{children:"This is the most expected flow we want to see in the system. Nothing to say about it, lets check the diagram to see the flow"}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Completed Flow\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Running\n    Running --\x3e Completed\n    Completed --\x3e [*]"}),"\n",(0,a.jsx)(n.h3,{id:"cancelled-flow",children:"Cancelled Flow"}),"\n",(0,a.jsxs)(n.p,{children:["There are two direction to drive an event to ",(0,a.jsx)(n.code,{children:"Cancelled"})," state."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Event is cancelled by user directly using system API after the job is initialized."}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Cancelled by user\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Cancelled\n    Cancelled --\x3e [*]"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Event is cancelled after running by a program/worker/handler and the program/worker/handler decides to tell KanthorQ system should cancel that job."}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Cancelled by user\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Running\n    Running --\x3e Cancelled\n    Cancelled --\x3e [*]"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"retryable--discarded-flow",children:"Retryable & Discarded Flow"}),"\n",(0,a.jsxs)(n.p,{children:["Once the program/worker/handler return an error after processing the event, we will put the state into a state name ",(0,a.jsx)(n.code,{children:"Retryable"}),". Another process need setting up to pick up those events to move them back to ",(0,a.jsx)(n.code,{children:"Running"})," state before processing it again"]}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Retryable Flow\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Running\n    Running --\x3e Retryable\n    Retryable --\x3e Running"}),"\n",(0,a.jsxs)(n.p,{children:["But if the event countinuely return an error after configurable times, we should put that event to the ",(0,a.jsx)(n.code,{children:"Discarded"})," state. Once event is in ",(0,a.jsx)(n.code,{children:"Discarded"})," state, user need to investigate on those events by themself to figure out what wrong was happen. They they can move it back to ",(0,a.jsx)(n.code,{children:"Available"})," so they can be processed again"]}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Retryable Flow\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Running\n\n    Running --\x3e Retryable: if attempt_count <= X\n    Running --\x3e Discarded: if attempt_count > X\n\n    Discarded--\x3e [*]"}),"\n",(0,a.jsx)(n.h3,{id:"stuck-flow",children:"Stuck Flow"}),"\n",(0,a.jsx)(n.p,{children:"Stuck Flow is designed to handle unexpected behavious when a program/worker/handler picks a job then does not report whether the event is processed successfully or not. It happens when the program/worker/handler is crashed because of various issues around the system."}),"\n",(0,a.jsx)(n.mermaid,{value:"---\ntitle: Stuck Flow\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Running\n    Running --\x3e Running"}),"\n",(0,a.jsx)(n.admonition,{type:"danger",children:(0,a.jsxs)(n.p,{children:["Currently a stuck job will be process forever until it is moved to ",(0,a.jsx)(n.code,{children:"Retryable"})," or ",(0,a.jsx)(n.code,{children:"Discarded"}),". That decision was made because we belived the crashed issue should not be happened persistently. After a fix, all stuck events should be processed normally and no action need taking."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);