"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1200],{7465:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var n=s(4848),o=s(8453);const i={title:"Limits",sidebar_label:"Limits",sidebar_position:4},r=void 0,a={id:"limits",title:"Limits",description:"This page lists all the limits and constraints of the KanthorQ system that you should be aware of.",source:"@site/docs/010-limits.md",sourceDirName:".",slug:"/limits",permalink:"/kanthorq/docs/limits",draft:!1,unlisted:!1,editUrl:"https://github.com/kanthorlabs/kanthorq/tree/main/packages/create-docusaurus/templates/shared/docs/010-limits.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Limits",sidebar_label:"Limits",sidebar_position:4},sidebar:"default",previous:{title:"Subject",permalink:"/kanthorq/docs/concepts/subject"},next:{title:"Advanced",permalink:"/kanthorq/docs/category/advanced"}},c={},d=[{value:"Events",id:"events",level:2},{value:"PostgreSQL",id:"postgresql",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"This page lists all the limits and constraints of the KanthorQ system that you should be aware of."}),"\n",(0,n.jsx)(t.h2,{id:"events",children:"Events"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["The ",(0,n.jsx)(t.code,{children:"body"})," property of an event can store up to ",(0,n.jsx)(t.strong,{children:"1GB"})," of binary data (",(0,n.jsx)(t.a,{href:"https://jdbc.postgresql.org/documentation/binary-data/",children:"Storing Binary Data"}),"). However, we do not recommend storing such large amounts of data due to the potential performance penalties."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"postgresql",children:"PostgreSQL"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Automatic Prepared Statement Caching feature (mode ",(0,n.jsx)(t.code,{children:"QueryExecModeCache"}),") is incompatible with PgBouncer so that you need to use ",(0,n.jsx)(t.code,{children:"default_query_exec_mode"})," in connection string instead. Example: ",(0,n.jsx)(t.code,{children:"postgres://postgres:changemenow@localhost:6432/postgres?sslmode=disable&default_query_exec_mode=exec"}),". More discussion at ",(0,n.jsx)(t.a,{href:"https://github.com/jackc/pgx/wiki/Automatic-Prepared-Statement-Caching",children:"Automatic Prepared Statement Caching"})," and ",(0,n.jsx)(t.a,{href:"https://github.com/jackc/pgx/discussions/1784",children:"Expected good QueryExecMode configurations with PgBouncer 1.21.0?"})]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var n=s(6540);const o={},i=n.createContext(o);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);