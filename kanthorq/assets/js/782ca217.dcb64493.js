"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2914],{6215:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=n(4848),s=n(8453),a=n(1470),o=n(9365);const i={title:"Consumer",sidebar_label:"Consumer",sidebar_position:7},l=void 0,c={id:"concepts/consumer",title:"Consumer",description:"Consumer is a subject-specific filter for events from a stream, storing metadata about how those events should be processed. A single consumer can only subscribe to one subject, but you can have multiple consumers for a single subject.",source:"@site/docs/003-concepts/007-consumer.md",sourceDirName:"003-concepts",slug:"/concepts/consumer",permalink:"/kanthorq/docs/concepts/consumer",draft:!1,unlisted:!1,editUrl:"https://github.com/kanthorlabs/kanthorq/tree/main/packages/create-docusaurus/templates/shared/docs/003-concepts/007-consumer.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Consumer",sidebar_label:"Consumer",sidebar_position:7},sidebar:"default",previous:{title:"Task",permalink:"/kanthorq/docs/concepts/task"},next:{title:"Subscriber",permalink:"/kanthorq/docs/concepts/subscriber"}},u={},d=[{value:"Manage consumers",id:"manage-consumers",level:2},{value:"Consumer Registry",id:"consumer-registry",level:3},{value:"Consumer",id:"consumer",level:3}];function m(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Consumer is a subject-specific filter for events from a stream, storing metadata about how those events should be processed. A single consumer can only subscribe to one subject, but you can have multiple consumers for a single subject."}),"\n",(0,r.jsxs)(t.p,{children:["For example, with the subject ",(0,r.jsx)(t.code,{children:"order.cancelled"}),", you might want to create two consumers: one to send a notification email to the user, notifying them of the order cancellation, and another to handle CRM logic for refund processing."]}),"\n",(0,r.jsx)(t.mermaid,{value:"---\ntitle: subscriber\n---\nflowchart TB\n  order_update[(kanthorq_stream_order_update)] -- order.cancelled  --\x3e Consumer_1[Send Cancellation Email]\n  order_update[(kanthorq_stream_order_update)] -- order.cancelled  --\x3e Consumer_2[Refund Order]\n  order_update[(kanthorq_stream_order_update)] -- order.created  ---\x3e Consumer_3[Send Notification]"}),"\n",(0,r.jsx)(t.h2,{id:"manage-consumers",children:"Manage consumers"}),"\n",(0,r.jsx)(t.p,{children:"Similar to streams, when you create or register a consumer, its information is stored in a registry before KanthorQ creates the actual consumer, which stores tasks for future processing."}),"\n",(0,r.jsx)(t.mermaid,{value:"---\ntitle: Consumer Register Flow\n---\nsequenceDiagram\n  Client ->> +Consumer Registry: name: send_cancellation_email, subject: order.cancelled\n  Consumer Registry --\x3e> -Client: Consumer(name: send_cancellation_email, subject: order.cancelled)\n\n  Client ->> +PostgreSQL: kanthorq_consumer_send_cancellation_email\n  PostgreSQL --\x3e> -Client: OK"}),"\n",(0,r.jsx)(t.h3,{id:"consumer-registry",children:"Consumer Registry"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Consumer Registry"})," stores important runtime configurations that control how the consumer should handle tasks. Here\u2019s an example definition of a consumer in KanthorQ:"]}),"\n",(0,r.jsxs)(a.A,{children:[(0,r.jsx)(o.A,{value:"go",label:"Go",default:!0,children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'type ConsumerRegistry struct {\n  StreamId          string   `json:"stream_id" validate:"required"`\n  StreamName        string   `json:"stream_name" validate:"required,is_collection_name"`\n  Id                string   `json:"id" validate:"required"`\n  Name              string   `json:"name" validate:"required,is_collection_name"`\n  SubjectIncludes   []string `json:"subject_includes" validate:"required,gt=0,dive,is_subject_filter"`\n  SubjectExcludes   []string `json:"subject_excludes" validate:"gte=0,dive,is_subject_filter"`\n  Cursor            string   `json:"cursor"`\n  AttemptMax        int16    `json:"attempt_max"`\n  VisibilityTimeout int64    `json:"visibility_timeout" validate:"required,gt=1000"`\n  CreatedAt         int64    `json:"created_at"`\n  UpdatedAt         int64    `json:"updated_at"`\n}\n'})})}),(0,r.jsx)(o.A,{value:"postgresql",label:"PostgreSQL",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"TABLE kanthorq_consumer_registry (\n  stream_id VARCHAR(64) NOT NULL,\n  stream_name VARCHAR(256) NOT NULL,\n  id VARCHAR(64) NOT NULL,\n  name VARCHAR(256) NOT NULL,\n  subject_includes VARCHAR(256) ARRAY NOT NULL,\n  subject_excludes VARCHAR(256) ARRAY NOT NULL DEFAULT '{}',\n  cursor VARCHAR(64) NOT NULL,\n  attempt_max SMALLINT NOT NULL DEFAULT 16,\n  visibility_timeout BIGINT NOT NULL DEFAULT 300000,\n  created_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000,\n  updated_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000,\n  PRIMARY KEY (name)\n)\n"})})})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Key Runtime Configurations"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"cursor"}),": Initially empty, the cursor stores the id of the most recent event processed by a consumer. For example, after processing an event with the subject ",(0,r.jsx)(t.code,{children:"order.created"})," (e.g., event id_10), the next execution will filter for events where ",(0,r.jsx)(t.code,{children:"id > id_10"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"attempt_max"}),": Defines the maximum number of retry attempts for error-prone tasks. After that number, the task will be mark as ",(0,r.jsx)(t.code,{children:"Discarded"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"consumer",children:"Consumer"}),"\n",(0,r.jsxs)(t.p,{children:["A Consumer stores a group of tasks generated from events in a stream. For instance, if your stream ",(0,r.jsx)(t.code,{children:"kanthorq_stream_order_update"})," has 999 events with the subject ",(0,r.jsx)(t.code,{children:"order.cancelled"})," and a consumer subscribed to it, the consumer ",(0,r.jsx)(t.code,{children:"kanthorq_consumer_send_cancellation_email"})," will store 999 tasks."]}),"\n",(0,r.jsx)(t.p,{children:"To retrieve tasks for your subscriber, you need to:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Generate a list of tasks for your consumer based on matching events."}),"\n",(0,r.jsx)(t.li,{children:"Pull previously generated tasks with their metadata."}),"\n"]}),"\n",(0,r.jsx)(t.mermaid,{value:'---\ntitle: Consumer Pull Flow\n---\nsequenceDiagram\nautonumber\n  loop Pulling\n    Client ->> +Consumer Registry: name: send_cancellation_email\n    Consumer Registry --\x3e> -Client: subject: order.cancelled, cursor: ""\n    Client ->> +kanthorq_stream_order_update: subject: order.cancelled, cursor: ""\n    kanthorq_stream_order_update ->> kanthorq_consumer_send_cancellation_email: 100 events\n    kanthorq_consumer_send_cancellation_email ->> kanthorq_consumer_send_cancellation_email: 100 tasks\n    kanthorq_consumer_send_cancellation_email --\x3e> Client: 100 tasks\n  end'}),"\n",(0,r.jsxs)(t.p,{children:["If a ",(0,r.jsx)(t.code,{children:"Stream"})," is defined similarly to an ",(0,r.jsx)(t.code,{children:"Event"}),", a ",(0,r.jsx)(t.code,{children:"Consumer"})," is defined similarly to a ",(0,r.jsx)(t.code,{children:"Task"}),", as it stores metadata about how to execute an event (i.e., a task)."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"TABLE kanthorq_consumer_send_cancellation_email (\n\tevent_id VARCHAR(64) NOT NULL,\n\tsubject VARCHAR(256) NOT NULL,\n\tstate SMALLINT NOT NULL DEFAULT 1,\n\tschedule_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000,\n\tfinalized_at BIGINT NOT NULL DEFAULT 0,\n\tattempt_count SMALLINT NOT NULL DEFAULT 0,\n\tattempted_at BIGINT NOT NULL DEFAULT 0,\n\tcreated_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000,\n\tupdated_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000,\n\tPRIMARY KEY (event_id)\n)\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>o});n(6540);var r=n(4164);const s={tabItem:"tabItem_Ymn6"};var a=n(4848);function o(e){let{children:t,hidden:n,className:o}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,o),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>x});var r=n(6540),s=n(4164),a=n(3104),o=n(6347),i=n(205),l=n(7485),c=n(1682),u=n(679);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:s}}=e;return{value:t,label:n,attributes:r,default:s}}))}(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const s=(0,o.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(s.location.search);t.set(a,e),s.replace({...s.location,search:t.toString()})}),[a,s])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,a=m(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[c,d]=p({queryString:n,groupId:s}),[b,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,a]=(0,u.Dv)(n);return[s,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:s}),_=(()=>{const e=c??b;return h({value:e,tabValues:a})?e:null})();(0,i.A)((()=>{_&&l(_)}),[_]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),f(e)}),[d,f,a]),tabValues:a}}var f=n(2303);const _={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(4848);function j(e){let{className:t,block:n,selectedValue:r,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),u=e=>{const t=e.currentTarget,n=l.indexOf(t),s=i[n].value;s!==r&&(c(t),o(s))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>l.push(e),onKeyDown:d,onClick:u,...a,className:(0,s.A)("tabs__item",_.tabItem,a?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:s}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===s));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function T(e){const t=b(e);return(0,g.jsxs)("div",{className:(0,s.A)("tabs-container",_.tabList),children:[(0,g.jsx)(j,{...t,...e}),(0,g.jsx)(v,{...t,...e})]})}function x(e){const t=(0,f.A)();return(0,g.jsx)(T,{...e,children:d(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(6540);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);