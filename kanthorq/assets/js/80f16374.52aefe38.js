"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4240],{5388:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var a=n(4848),s=n(8453),r=n(1470),i=n(9365);const l={title:"Task",sidebar_label:"Task",sidebar_position:5},o=void 0,c={id:"concepts/task",title:"Task",description:"If an Event is the DTO for client-to-KanthorQ publisher communication, then a Task is the DTO for KanthorQ subscriber-to-client handler communication.",source:"@site/docs/003-concepts/005-task.md",sourceDirName:"003-concepts",slug:"/concepts/task",permalink:"/kanthorq/docs/concepts/task",draft:!1,unlisted:!1,editUrl:"https://github.com/kanthorlabs/kanthorq/tree/main/packages/create-docusaurus/templates/shared/docs/003-concepts/005-task.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Task",sidebar_label:"Task",sidebar_position:5},sidebar:"default",previous:{title:"Stream",permalink:"/kanthorq/docs/concepts/stream"},next:{title:"Consumer",permalink:"/kanthorq/docs/concepts/consumer"}},d={},u=[{value:"Task State",id:"task-state",level:3},{value:"Completed Flow",id:"completed-flow",level:4},{value:"Cancelled Flow",id:"cancelled-flow",level:4},{value:"Retryable &amp; Discarded Flow",id:"retryable--discarded-flow",level:4},{value:"Stuck Flow",id:"stuck-flow",level:4}];function h(e){const t={admonition:"admonition",code:"code",em:"em",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["If an ",(0,a.jsx)(t.code,{children:"Event"})," is the DTO for client-to-KanthorQ publisher communication, then a ",(0,a.jsx)(t.code,{children:"Task"})," is the DTO for KanthorQ subscriber-to-client handler communication."]}),"\n",(0,a.jsx)(t.p,{children:"So, what is the relationship between an Event and a Task? It\u2019s a one-to-many relationship: one event can generate multiple tasks, but each task references only one event."}),"\n",(0,a.jsx)(t.mermaid,{value:"---\ntitle: Event & Task RelationShip\n---\nerDiagram\n  Event ||--}| Task: generates"}),"\n",(0,a.jsxs)(t.p,{children:["Lets review about the structure of ",(0,a.jsx)(t.code,{children:"Task"}),":"]}),"\n",(0,a.jsxs)(r.A,{children:[(0,a.jsx)(i.A,{value:"go",label:"Go",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-go",children:'type Task struct {\n  EventId      string `json:"event_id" validate:"required"`\n  Subject      string `json:"subject" validate:"required,is_subject"`\n  State        int16  `json:"state"`\n  ScheduleAt   int64  `json:"schedule_at"`\n  AttemptCount int16  `json:"attempt_count"`\n  AttemptedAt  int64  `json:"attempted_at"`\n  FinalizedAt  int64  `json:"finalized_at"`\n  CreatedAt    int64  `json:"created_at"`\n  UpdatedAt    int64  `json:"updated_at"`\n}\n'})})}),(0,a.jsx)(i.A,{value:"postgresql",label:"PostgreSQL",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sql",children:"TABLE kanthorq_consumer_send_confirmed_email (\n  event_id VARCHAR(64) NOT NULL,\n  subject VARCHAR(256) NOT NULL,\n  state SMALLINT NOT NULL DEFAULT 1,\n  schedule_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000,\n  finalized_at BIGINT NOT NULL DEFAULT 0,\n  attempt_count SMALLINT NOT NULL DEFAULT 0,\n  attempted_at BIGINT NOT NULL DEFAULT 0,\n  created_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000,\n  updated_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM CURRENT_TIMESTAMP) * 1000\n)\n"})})})]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"event_id"})," and ",(0,a.jsx)(t.code,{children:"subject"})," are properties that we copy from an ",(0,a.jsx)(t.code,{children:"Event"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"state"})," is the state of a task, indicates the status of a task."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"schedule_at"})," is the time when a task becomes eligible for processing. For example, if you schedule a task at ",(0,a.jsx)(t.em,{children:"10:00 AM"}),", it can be processed at any point after that\u2014such as at ",(0,a.jsx)(t.em,{children:"10:01 AM"}),", ",(0,a.jsx)(t.em,{children:"11:15 AM"}),", or even ",(0,a.jsx)(t.em,{children:"2:00 PM"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"finalized_at"})," is the time when KanthorQ has finished processing a task. No further action will be performed on the task after this time. If you want to take further actions, such as retrying a ",(0,a.jsx)(t.code,{children:"Discarded"})," task, you must do it manually by calling an API."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"attempt_count"})," is the number of times a task has been retried."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"attempted_at"})," is the timestamp of the latest retry attempt."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"task-state",children:"Task State"}),"\n",(0,a.jsx)(t.p,{children:"There are six possible states for a task:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Available"}),": The task is ready to be processed."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Discarded"}),": The task has failed too many times and is no longer eligible for retries. Manual intervention is required to retry it."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Cancelled"}),": The task has been manually canceled by the user."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Completed"}),": The task has successfully run to completion."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Running"}),": The task is currently being processed."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"Retryable"}),": The task has failed but is eligible to be retried."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"We can categorize states of tasks into three groups"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Initial States"}),": These are the starting states before a task is processed. Currently, there is only one: ",(0,a.jsx)(t.code,{children:"Available"}),"."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Transitional States"}),": These states indicate that a task is in progress or being retried. The ",(0,a.jsx)(t.code,{children:"Running"})," and ",(0,a.jsx)(t.code,{children:"Retryable"})," states fall under this category."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Final States"}),": Once a task reaches one of these states, it remains there until manual action is taken. These states include ",(0,a.jsx)(t.code,{children:"Discarded"}),", ",(0,a.jsx)(t.code,{children:"Cancelled"}),", and ",(0,a.jsx)(t.code,{children:"Completed"}),"."]}),"\n"]}),"\n",(0,a.jsx)(t.mermaid,{value:"---\ntitle: State Transition Flow\n---\nstateDiagram-v2\n    [*] --\x3e Available\n\n    Available --\x3e Running\n    Running --\x3e Completed\n\n    Running --\x3e Running\n\n    Running --\x3e Retryable\n    Retryable --\x3e Running\n    Retryable --\x3e Discarded\n\n    Available --\x3e Cancelled\n\n    Discarded --\x3e [*]\n    Cancelled --\x3e [*]\n    Completed --\x3e [*]"}),"\n",(0,a.jsx)(t.h4,{id:"completed-flow",children:"Completed Flow"}),"\n",(0,a.jsx)(t.p,{children:"This is the most desirable flow, where tasks successfully complete without any issues. See the diagram below for the flow:"}),"\n",(0,a.jsx)(t.mermaid,{value:"---\ntitle: Completed Flow\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Running\n    Running --\x3e Completed\n    Completed --\x3e [*]"}),"\n",(0,a.jsx)(t.h4,{id:"cancelled-flow",children:"Cancelled Flow"}),"\n",(0,a.jsxs)(t.p,{children:["There are two paths that can lead a task to the ",(0,a.jsx)(t.code,{children:"Cancelled"})," state:"]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"The event is directly canceled by the user through the system API after the task is initialized."}),"\n"]}),"\n",(0,a.jsx)(t.mermaid,{value:"---\ntitle: Cancelled by user\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Cancelled\n    Cancelled --\x3e [*]"}),"\n",(0,a.jsxs)(t.ol,{start:"2",children:["\n",(0,a.jsx)(t.li,{children:"The event is canceled while running by a program/worker/handler, which then notifies the KanthorQ system to cancel the task."}),"\n"]}),"\n",(0,a.jsx)(t.mermaid,{value:"---\ntitle: Cancelled by user\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Running\n    Running --\x3e Cancelled\n    Cancelled --\x3e [*]"}),"\n",(0,a.jsx)(t.h4,{id:"retryable--discarded-flow",children:"Retryable & Discarded Flow"}),"\n",(0,a.jsxs)(t.p,{children:["When a program/worker/handler encounters an error while processing an event, the task transitions to the ",(0,a.jsx)(t.code,{children:"Retryable"})," state. A separate process must pick up the task and move it back to the ",(0,a.jsx)(t.code,{children:"Running"})," state to retry processing."]}),"\n",(0,a.jsx)(t.mermaid,{value:"---\ntitle: Retryable Flow\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Running\n    Running --\x3e Retryable\n    Retryable --\x3e Running"}),"\n",(0,a.jsxs)(t.p,{children:["If the task continues to fail after a configurable number of retries, it transitions to the ",(0,a.jsx)(t.code,{children:"Discarded"})," state. Once in the ",(0,a.jsx)(t.code,{children:"Discarded"})," state, the user must manually investigate and decide whether to move the task back to ",(0,a.jsx)(t.code,{children:"Available"})," for reprocessing."]}),"\n",(0,a.jsx)(t.mermaid,{value:"---\ntitle: Discarded Flow\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Running\n    Running --\x3e Retryable\n\n    Retryable --\x3e Retryable: if attempt_count <= attempt_max\n    Retryable --\x3e Discarded: if attempt_count > attempt_max\n\n    Discarded--\x3e [*]"}),"\n",(0,a.jsx)(t.h4,{id:"stuck-flow",children:"Stuck Flow"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.strong,{children:"Stuck Flow"})," handles situations where a program/worker/handler starts processing a task but doesn\u2019t report the result due to a crash or other unexpected issue."]}),"\n",(0,a.jsx)(t.mermaid,{value:"---\ntitle: Stuck Flow\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Running\n    Running --\x3e Running"}),"\n",(0,a.jsxs)(t.p,{children:["Tasks that are stuck in the ",(0,a.jsx)(t.code,{children:"Running"})," state will be retried automatically after a configurable period known as the ",(0,a.jsx)(t.strong,{children:"Visibility Timeout"}),". This means that a designated period is reserved for you to complete the task. If the task remains unprocessed after this period, we will attempt to pick it up and process it again."]}),"\n",(0,a.jsx)(t.admonition,{type:"danger",children:(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.strong,{children:"Stuck Flow"})," poses a risk of duplicated execution. It\u2019s crucial to plan your ",(0,a.jsx)(t.code,{children:"Subscriber"}),"s carefully to ensure that your logic can be completed in a timely manner. Otherwise, another process may pick up the task and execute it again, leading to potential duplication."]})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>i});n(6540);var a=n(4164);const s={tabItem:"tabItem_Ymn6"};var r=n(4848);function i(e){let{children:t,hidden:n,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,i),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>T});var a=n(6540),s=n(4164),r=n(3104),i=n(6347),l=n(205),o=n(7485),c=n(1682),d=n(679);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:s}}=e;return{value:t,label:n,attributes:a,default:s}}))}(n);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const s=(0,i.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(s.location.search);t.set(r,e),s.replace({...s.location,search:t.toString()})}),[r,s])]}function x(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,r=h(e),[i,o]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[c,u]=p({queryString:n,groupId:s}),[x,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,r]=(0,d.Dv)(n);return[s,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:s}),f=(()=>{const e=c??x;return m({value:e,tabValues:r})?e:null})();(0,l.A)((()=>{f&&o(f)}),[f]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),b(e)}),[u,b,r]),tabValues:r}}var b=n(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=n(4848);function g(e){let{className:t,block:n,selectedValue:a,selectValue:i,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),d=e=>{const t=e.currentTarget,n=o.indexOf(t),s=l[n].value;s!==a&&(c(t),i(s))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=o.indexOf(e.currentTarget)+1;t=o[n]??o[0];break}case"ArrowLeft":{const n=o.indexOf(e.currentTarget)-1;t=o[n]??o[o.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>o.push(e),onKeyDown:u,onClick:d,...r,className:(0,s.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:s}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==s})))})}function k(e){const t=x(e);return(0,j.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,j.jsx)(g,{...t,...e}),(0,j.jsx)(v,{...t,...e})]})}function T(e){const t=(0,b.A)();return(0,j.jsx)(k,{...e,children:u(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>l});var a=n(6540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);