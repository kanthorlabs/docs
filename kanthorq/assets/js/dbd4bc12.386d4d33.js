"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3001],{6344:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=t(4848),a=t(8453);const o={title:"Task management",sidebar_label:"Task management",sidebar_position:4},i=void 0,r={id:"guides/task-management",title:"Task management",description:"This guide introduces task management in KanthorQ, offering a hands-on look at interacting with KanthorQ\u2019s core API. You'll get a clear view of how to use the API directly, allowing you to discover advanced ways to wokr with KanthorQ effectively.",source:"@site/docs/002-guides/004-task-management.md",sourceDirName:"002-guides",slug:"/guides/task-management",permalink:"/kanthorq/docs/guides/task-management",draft:!1,unlisted:!1,editUrl:"https://github.com/kanthorlabs/kanthorq/tree/main/packages/create-docusaurus/templates/shared/docs/002-guides/004-task-management.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Task management",sidebar_label:"Task management",sidebar_position:4},sidebar:"default",previous:{title:"Task acknowledgement",permalink:"/kanthorq/docs/guides/task-acknowledgement"},next:{title:"Concepts",permalink:"/kanthorq/docs/category/concepts"}},c={},l=[{value:"Cancellation",id:"cancellation",level:2},{value:"Resumption",id:"resumption",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"This guide introduces task management in KanthorQ, offering a hands-on look at interacting with KanthorQ\u2019s core API. You'll get a clear view of how to use the API directly, allowing you to discover advanced ways to wokr with KanthorQ effectively."}),"\n",(0,s.jsx)(n.h2,{id:"cancellation",children:"Cancellation"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["You can only mark a task as ",(0,s.jsx)(n.code,{children:"Cancelled"})," if it's in ",(0,s.jsx)(n.code,{children:"Pending"}),", ",(0,s.jsx)(n.code,{children:"Available"})," or ",(0,s.jsx)(n.code,{children:"Retryable"})," state."]})}),"\n",(0,s.jsx)(n.p,{children:"To cancel a task in KanthorQ, make sure you have the following ready:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consumer"}),": Identify the consumer that the task belongs to."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PostgreSQL Connection"}),": Establish a connection using the ",(0,s.jsx)(n.code,{children:"pgx"})," library."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Task"}),": Specify the task that you want to cancel."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"These elements are essential for managing task cancellation directly through the KanthorQ system."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// Assume `consumer` is already defined as a pointer to an entities.ConsumerRegistry struct\n\n// Establish a connection to PostgreSQL\nconn, err := pgx.Connect(ctx, DATABASE_URI)\nif err != nil {\n    // Handle connection error\n    log.Fatalf("Failed to connect to database: %v", err)\n}\n\n// Define the cancellation request\ncancellation, err := core.Do(ctx, conn, &core.TaskMarkCancelledReq{\n    Consumer: consumer,\n    Tasks:    []*entities.Task{task},\n})\n\nif err != nil {\n    // Handle potential errors during task cancellation\n    log.Fatalf("Failed to cancel task: %v", err)\n}\n\n// `cancellation` is a pointer to core.TaskMarkCancelledRes\n// `Updated` contains the event IDs of tasks that have been successfully cancelled\nfmt.Printf("Cancelled tasks with event IDs: %v\\n", cancellation.Updated)\n\n// `Noop` contains event IDs of tasks that couldn\'t be cancelled because they are:\n// - Not in `Pending`, `Available`, or `Retryable` states\n// - Not found in the registry with the given event ID\nfmt.Printf("No operation occurred for tasks with event IDs: %v\\n", cancellation.Noop)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"https://github.com/kanthorlabs/kanthorq/blob/main/example/task-management/main.go",children:"Task Management example"})," for the complete code."]}),"\n",(0,s.jsx)(n.h2,{id:"resumption",children:"Resumption"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["You can only resume a task if it's in ",(0,s.jsx)(n.code,{children:"Discarded"})," or ",(0,s.jsx)(n.code,{children:"Cancelled"})," state."]})}),"\n",(0,s.jsx)(n.p,{children:"Once a task is cancelled, it can be resumed, allowing the system to process it again. The workflow for resuming a task closely resembles the cancellation process:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Identify the consumer associated with the task."}),"\n",(0,s.jsx)(n.li,{children:"Establish a connection to PostgreSQL."}),"\n",(0,s.jsx)(n.li,{children:"Send a request to update the task's status to make it resumable."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Resuming a task involves modifying its state, thereby making it eligible for further processing."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// Assume `consumer` is already defined as a pointer to an entities.ConsumerRegistry struct\n\n// Establish a connection to PostgreSQL\nconn, err := pgx.Connect(ctx, DATABASE_URI)\nif err != nil {\n    // Handle connection error\n    log.Fatalf("Failed to connect to database: %v", err)\n}\n\n// Define the resumption request\nresumption, err := core.Do(ctx, conn, &core.TaskResumeReq{\n    Consumer: consumer,\n    Tasks:    []*entities.Task{task},\n})\n\nif err != nil {\n    // Handle potential errors during task resumption\n    log.Fatalf("Failed to resume task: %v", err)\n}\n\n// `resumption` is a pointer to core.TaskResumeRes\n// `Updated` contains the event IDs of tasks that have been successfully resumed\nfmt.Printf("Resumed tasks with event IDs: %v\\n", resumption.Updated)\n\n// `Noop` contains event IDs of tasks that couldn\'t be resumed because they are:\n// - Not in `Discarded` or `Cancelled` states\n// - Not found in the registry with the given event ID\nfmt.Printf("No operation occurred for tasks with event IDs: %v\\n", resumption.Noop)\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(6540);const a={},o=s.createContext(a);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);