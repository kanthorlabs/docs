"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1108],{829:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(4848),o=n(8453);const s={title:"Subscriber",sidebar_label:"Subscriber",sidebar_position:7},a=void 0,i={id:"concepts/subscriber",title:"Subscriber",description:"The Subscriber is the most complicated component in KanthorQ system, but that complexity serves only one purpose: get your a task to work on it then try to get your task moves to Final State. If something went wrong with your task, you can ask for retry both manually or automatically from the Subscriber.",source:"@site/docs/003-concepts/007-subscriber.md",sourceDirName:"003-concepts",slug:"/concepts/subscriber",permalink:"/kanthorq/docs/concepts/subscriber",draft:!1,unlisted:!1,editUrl:"https://github.com/kanthorlabs/kanthorq/tree/main/packages/create-docusaurus/templates/shared/docs/003-concepts/007-subscriber.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Subscriber",sidebar_label:"Subscriber",sidebar_position:7},sidebar:"default",previous:{title:"Consumer",permalink:"/kanthorq/docs/concepts/consumer"},next:{title:"Subject",permalink:"/kanthorq/docs/concepts/subject"}},l={},c=[{value:"Workflows",id:"workflows",level:2},{value:"The Pulling Workflow",id:"the-pulling-workflow",level:3},{value:"The Converting Flow",id:"the-converting-flow",level:4},{value:"The Fulfilling Flow",id:"the-fulfilling-flow",level:4},{value:"The Updating Workflow",id:"the-updating-workflow",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["The Subscriber is the most complicated component in KanthorQ system, but that complexity serves only one purpose: get your a task to work on it then try to get your task moves to ",(0,r.jsx)(t.strong,{children:"Final State"}),". If something went wrong with your task, you can ask for retry both manually or automatically from the Subscriber."]}),"\n",(0,r.jsx)(t.h2,{id:"workflows",children:"Workflows"}),"\n",(0,r.jsx)(t.p,{children:"The Subscriber workflows will contains two parts: the pulling workflow that help you get tasks for your works and the updating workflow that help you update your tasks state after you have done with them"}),"\n",(0,r.jsx)(t.h3,{id:"the-pulling-workflow",children:"The Pulling Workflow"}),"\n",(0,r.jsx)(t.mermaid,{value:"---\ntitle: The Pulling Workflow\n---\nsequenceDiagram\n  autonumber\n\n  rect rgb(191, 223, 255)\n  note right of Subscriber: Converting Flow\n\n  Subscriber ->> +Consumer Registry: name: send_cancellation_email\n  Consumer Registry --\x3e> Consumer Registry: lock send_cancellation_email\n  loop [got 100 tasks] or [reached max round]\n    Consumer Registry ->> +kanthorq_stream_order_update: subject: order.cancelled, cursor: evt_01J36ZJACKR5FXDWVKASC4BNCN, limit: 100\n    kanthorq_stream_order_update --\x3e> -kanthorq_stream_order_update: scanning\n    kanthorq_stream_order_update ->> +send_cancellation_email: found and convert 85 events to tasks\n  end\n\n  send_cancellation_email --\x3e> +Subscriber: 85 tasks\n  Subscriber --\x3e> Consumer Registry: update cursor\n  Consumer Registry --\x3e> Consumer Registry: release send_cancellation_email\n\n  end\n\n  rect rgb(200, 150, 255)\n  note right of Subscriber: Fulfilling Flow\n\n  Subscriber ->> +kanthorq_stream_order_update: 85 event ids\n  kanthorq_stream_order_update ->> -Subscriber: 85 event records\n  end\n\n"}),"\n",(0,r.jsx)(t.p,{children:"The Pulling flow contains two child workflow: the Converting flow that help you scans events from a stream with given subject then convert to tasks on a stream and the Fulfilling flow that get event records based on the list of converted tasks of the Converting flow."}),"\n",(0,r.jsx)(t.h4,{id:"the-converting-flow",children:"The Converting Flow"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"We connect to the Consumer Registry to start our flow."}),"\n",(0,r.jsx)(t.li,{children:"We ask Consumer Registry to lock the record of requesting consumer"}),"\n",(0,r.jsx)(t.li,{children:"Then use properties of the consumer: a stream name, a subject and a cursor of previous scanning in the stream to make a request to the stream."}),"\n",(0,r.jsx)(t.li,{children:"Perform the scaning process on the given stream based on the given subject and cursor to obtain enough events"}),"\n",(0,r.jsx)(t.li,{children:"Convert founding events to tasks"}),"\n",(0,r.jsx)(t.li,{children:"Return tasks to the Subscriber"}),"\n",(0,r.jsxs)(t.li,{children:["Update the Consumer Registry with latest cursor (the latest ",(0,r.jsx)(t.code,{children:"event_id"})," of tasks)"]}),"\n",(0,r.jsx)(t.li,{children:"Release the lock of the Consumer"}),"\n"]}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsxs)(t.p,{children:["By saying ",(0,r.jsx)(t.strong,{children:"scanning"}),", we mean we will query events from a stream from the lower bound that is specify by the ",(0,r.jsx)(t.strong,{children:"cursor"})," until we get enough rows (100 events). The simplify query will look like"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sql",children:"SELECT * FROM kanthorq_stream_order_update WHERE subject = 'order.cancelled' AND id > 'evt_01J36ZJACKR5FXDWVKASC4BNCN' LIMIT 100\n"})})]}),"\n",(0,r.jsx)(t.h4,{id:"the-fulfilling-flow",children:"The Fulfilling Flow"}),"\n",(0,r.jsxs)(t.ol,{start:"9",children:["\n",(0,r.jsxs)(t.li,{children:["We get event records based on the list of tasks we have received (task contains ",(0,r.jsx)(t.code,{children:"event_id"}),")"]}),"\n",(0,r.jsx)(t.li,{children:"We receive event records then perform our handler execution logic."}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"the-updating-workflow",children:"The Updating Workflow"}),"\n",(0,r.jsxs)(t.p,{children:["After finished your works, you need to report back to the Subscriber what state of a task should be updated to. For example, there are two main states you want the Subscriber to update: ",(0,r.jsx)(t.code,{children:"Completed"})," and ",(0,r.jsx)(t.code,{children:"Retryable"})," for succeed task and error task respectively. But there are some situation you don't want to let error task to be retried, so you want to mark that task as ",(0,r.jsx)(t.code,{children:"Cancelled"})]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["Checkout our definition about ",(0,r.jsx)(t.a,{href:"/kanthorq/docs/concepts/task#task-state",children:"Task State"})," to see how many state do we have and what categories they are."]})}),"\n",(0,r.jsx)(t.mermaid,{value:"---\ntitle: The Updating Workflow\n---\nsequenceDiagram\n  Subscriber ->> +Handler: 85 events\n  Handler --\x3e> -Handler: execute 85 events\n\n\n  par [Succeed]\n    Handler --\x3e> +Subscriber: 83 succeed tasks\n    Subscriber ->> Consumer: mark as completed 83 tasks\n  and [Error]\n    Handler --\x3e> Subscriber: 2 error tasks\n    Subscriber ->> Consumer: mark as retryable 2 tasks\n  end"}),"\n",(0,r.jsxs)(t.admonition,{type:"danger",children:[(0,r.jsx)(t.p,{children:"If you plan to update the state by yourself (it's just a PostgreSQL query and you can totally do it by yourslef), make sure you keep in mind that you should only move a task from state-A to state-B, not override the task to state B. Update a task from arbitrary state to state B produces lost update and it's hard to debug what wrong happened."}),(0,r.jsx)(t.p,{children:"Example:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"# no supprise, if task does not in state-A, nothing will be updated\ntask:state-A -> task:state-B\n\n# if concurrency updating happen at the same time, [Lost Update](https://en.wikipedia.org/wiki/Concurrency_control) will happen\ntask -> task:state-B\n\n# three updates bellow are executed at the same time, then you will lost update of two tasks and does not know about it to rollback if it's necessary\ntask:state-A -> task:state-B\ntask:state-X -> task:state-B\ntask:state-Y -> task:state-B\n"})})]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var r=n(6540);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);