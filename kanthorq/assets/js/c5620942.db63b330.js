"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7468],{7196:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var s=n(4848),o=n(8453);const r={title:"Default Workflow",sidebar_label:"Default Workflow",sidebar_position:1},a=void 0,i={id:"guides/default-workflow",title:"Default Workflow",description:"The default workflow of KanthorQ is simple, you insert your tasks with different subjects, then use consumer to filter which tasks you want to execute base on your subject filter. If everything works well, tasks will be marked as Completed, otherwise it will be Retryable.",source:"@site/docs/003-guides/001-default-workflow.md",sourceDirName:"003-guides",slug:"/guides/default-workflow",permalink:"/kanthorq/docs/guides/default-workflow",draft:!1,unlisted:!1,editUrl:"https://github.com/kanthorlabs/kanthorq/tree/main/packages/create-docusaurus/templates/shared/docs/003-guides/001-default-workflow.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Default Workflow",sidebar_label:"Default Workflow",sidebar_position:1},sidebar:"default",previous:{title:"Guides",permalink:"/kanthorq/docs/category/guides"},next:{title:"Retry and Discard Workflow",permalink:"/kanthorq/docs/guides/retry-and-discard-workflow"}},l={},c=[];function u(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",mermaid:"mermaid",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The default workflow of KanthorQ is simple, you insert your tasks with different subjects, then use consumer to filter which tasks you want to execute base on your subject filter. If everything works well, tasks will be marked as ",(0,s.jsx)(t.code,{children:"Completed"}),", otherwise it will be ",(0,s.jsx)(t.code,{children:"Retryable"}),"."]}),"\n",(0,s.jsx)(t.mermaid,{value:"---\ntitle: Default Workflow\n---\nstateDiagram-v2\n    direction LR\n    [*] --\x3e Available\n    Available --\x3e Running\n    Running --\x3e Completed\n    Completed --\x3e [*]\n    Running --\x3e Retryable\n    Retryable --\x3e [*]"}),"\n",(0,s.jsx)(t.admonition,{type:"warning",children:(0,s.jsx)(t.p,{children:"In this guideline, I will omit all error handling logic to make the code more readable. You should handle errors in your codebase to make sure it works well."})}),"\n",(0,s.jsxs)(t.p,{children:["Lets's start with the example codebase. You can find it in the ",(0,s.jsx)(t.a,{href:"https://github.com/kanthorlabs/kanthorq/tree/main/example/default",children:"example/default"})," folder."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'// import necessary packages\n// import "github.com/kanthorq/kanthorq"\n\nvar DATABASE_URI = "postgres://postgres:changemenow@localhost:5432/postgres?sslmode=disable"\n\n// Initialize a publisher\npublisher, _ := kanthorq.NewPublisher(DATABASE_URI, &kanthorq.PublisherOptions{\n  StreamName: kanthorq.DefaultStreamName,\n})\npublisher.Start(context.Background())\ndefer publisher.Stop(context.Background())\n\n// publish some events, it will be stored inside our stream with name kanthorq.DefaultStreamName\npublisher.Send(context.Background(), kanthorq.NewEvent("system.say_hello", []byte("{\\"msg\\": \\"Hello World!\\"}")))\n\n// Initialize a subscriber that will process events that has subject that match with the filter "system.>"\n// so both system.say_hello and system.say_goodbye will be processed\nsubscriber, _ := kanthorq.NewSubscriber(DATABASE_URI, &kanthorq.SubscriberOptions{\n  StreamName: kanthorq.DefaultStreamName,\n  ConsumerName: kanthorq.DefaultConsumerName,\n  ConsumerSubjectFilter: "system.>",\n  ConsumerAttemptMax: kanthorq.DefaultConsumerAttemptMax,\n})\nctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGINT, syscall.SIGTERM)\ndefer cancel()\nsubscriber.Start(ctx)\ndefer subscriber.Stop(ctx)\n\ngo subscriber.Receive(ctx, func(ctx context.Context, event *kanthorq.Event) error {\n  log.Print(string(event.Body))\n  return nil\n})\n\n// wait for the cancellation signal\n<-ctx.Done()\n'})}),"\n",(0,s.jsxs)(t.p,{children:["You may wonder what is subject filter (",(0,s.jsx)(t.code,{children:"system.>"}),") in the example codebase? Well, it is the subject filter that will be used to filter which events you want to process. And I inspired myself on the subject filter in the ",(0,s.jsx)(t.a,{href:"https://docs.nats.io/nats-concepts/subjects",children:"Subject-Based Messaging"})," of the project named ",(0,s.jsx)(t.a,{href:"https://nats.io/",children:"NATS.io"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["I borrow the subject quote from the ",(0,s.jsx)(t.a,{href:"https://nats.io/",children:"NATS.io"})," project here"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"What is a subject? At its simplest, a subject is just a string of characters that form a name the publisher and subscriber can use to find each other. More commonly subject hierarchies are used to scope messages into semantic namespaces."}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["You can find more information about how to use subject in KanthorQ at ",(0,s.jsx)(t.a,{href:"/kanthorq/docs/concepts/subject",children:"Concepts - Subject"})]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(6540);const o={},r=s.createContext(o);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);