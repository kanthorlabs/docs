"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7824],{8695:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"default":[{"type":"link","label":"Quickstart","href":"/kanthorq/docs/quickstart","docId":"quickstart","unlisted":false},{"type":"category","label":"Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/kanthorq/docs/concepts/overview","docId":"concepts/overview","unlisted":false},{"type":"link","label":"Publisher","href":"/kanthorq/docs/concepts/publisher","docId":"concepts/publisher","unlisted":false},{"type":"link","label":"Event","href":"/kanthorq/docs/concepts/event","docId":"concepts/event","unlisted":false},{"type":"link","label":"Stream","href":"/kanthorq/docs/concepts/stream","docId":"concepts/stream","unlisted":false},{"type":"link","label":"Task","href":"/kanthorq/docs/concepts/task","docId":"concepts/task","unlisted":false},{"type":"link","label":"Consumer","href":"/kanthorq/docs/concepts/consumer","docId":"concepts/consumer","unlisted":false},{"type":"link","label":"Subscriber","href":"/kanthorq/docs/concepts/subscriber","docId":"concepts/subscriber","unlisted":false},{"type":"link","label":"Subject","href":"/kanthorq/docs/concepts/subject","docId":"concepts/subject","unlisted":false}],"href":"/kanthorq/docs/category/concepts"},{"type":"link","label":"Limits","href":"/kanthorq/docs/limits","docId":"limits","unlisted":false},{"type":"category","label":"Advanced","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Handle jobs manually","href":"/kanthorq/docs/advanced/handle-jobs-manually","docId":"advanced/handle-jobs-manually","unlisted":false},{"type":"link","label":"KanthorQ as service","href":"/kanthorq/docs/advanced/kanthorq-as-service","docId":"advanced/kanthorq-as-service","unlisted":false},{"type":"link","label":"Scale for large dataset","href":"/kanthorq/docs/advanced/scale-for-large-dataset","docId":"advanced/scale-for-large-dataset","unlisted":false}],"href":"/kanthorq/docs/category/advanced"}]},"docs":{"advanced/handle-jobs-manually":{"id":"advanced/handle-jobs-manually","title":"Handle jobs manually","description":"TBD","sidebar":"default"},"advanced/kanthorq-as-service":{"id":"advanced/kanthorq-as-service","title":"KanthorQ as service","description":"TBD","sidebar":"default"},"advanced/scale-for-large-dataset":{"id":"advanced/scale-for-large-dataset","title":"Scale for large dataset","description":"- PGBouncer","sidebar":"default"},"concepts/consumer":{"id":"concepts/consumer","title":"Consumer","description":"Consumer is a subject specific filter of events from a stream what stores metadata about how we want to process those events. One consumer can only subscribe to one subject but we can have more than one consumer for only one subject.","sidebar":"default"},"concepts/event":{"id":"concepts/event","title":"Event","description":"Event is an entity that represents a data transfer object (DTO) between publishers and streams in KanthorQ. It is similar with HTTP request in client-server commication over HTTP or proto definition in gRPC.","sidebar":"default"},"concepts/overview":{"id":"concepts/overview","title":"Overview","description":"Let\'s discover what the KanthorQ architecture is and how the components communicate with each other.","sidebar":"default"},"concepts/publisher":{"id":"concepts/publisher","title":"Publisher","description":"The Publisher has only one responsibility, it receives your events, push it into a stream and report back to you whether those events are inserted successfully or not. It does not thing about organizing your data into a time-series shape so make sure the ID of your event is Lexicographically Sortable Identifier","sidebar":"default"},"concepts/stream":{"id":"concepts/stream","title":"Stream","description":"Stream is a persistent, append-only event group that serves specific purposes. For example, you can create a stream with name order_update to put all events that are relates to your order into that stream.","sidebar":"default"},"concepts/subject":{"id":"concepts/subject","title":"Subject","description":"TBD","sidebar":"default"},"concepts/subscriber":{"id":"concepts/subscriber","title":"Subscriber","description":"The Subscriber is the most complicated component in KanthorQ system, but that complexity serves only one purpose: get your a task to work on it then try to get your task moves to Final State. If something went wrong with your task, you can ask for retry both manually or automatically from the Subscriber.","sidebar":"default"},"concepts/task":{"id":"concepts/task","title":"Task","description":"If Event is DTO of client and KanthorQ publisher, Task is DTO of KanthorQ subscriber and client handler.","sidebar":"default"},"limits":{"id":"limits","title":"Limits","description":"This page lists all limits (or constraints) about KanthorQ system you should know","sidebar":"default"},"quickstart":{"id":"quickstart","title":"Quickstart","description":"Learn how to install KanthorQ packages for Go, run migrations to get KanthorQ\'s database schema in place, and start working with KanthorQ publisher and subscriber.","sidebar":"default"}}}}')}}]);