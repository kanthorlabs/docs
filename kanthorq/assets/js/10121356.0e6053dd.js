"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9428],{9390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var o=n(4848),r=n(8453);const s={title:"Subscriber",sidebar_label:"Subscriber",sidebar_position:7},a=void 0,i={id:"concepts/subscriber",title:"Subscriber",description:"The Subscriber is the most complicated component in KanthorQ system, but that complexity serves only one purpose: get your a task to work on it then try to get your task moves to Final State. If something went wrong with your task, you can ask for retry both manually or automatically from the Subscriber.",source:"@site/docs/002-concepts/007-subscriber.md",sourceDirName:"002-concepts",slug:"/concepts/subscriber",permalink:"/kanthorq/docs/concepts/subscriber",draft:!1,unlisted:!1,editUrl:"https://github.com/kanthorlabs/kanthorq/tree/main/packages/create-docusaurus/templates/shared/docs/002-concepts/007-subscriber.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Subscriber",sidebar_label:"Subscriber",sidebar_position:7},sidebar:"default",previous:{title:"Consumer",permalink:"/kanthorq/docs/concepts/consumer"},next:{title:"Advanced",permalink:"/kanthorq/docs/category/advanced"}},l={},c=[{value:"Workflows",id:"workflows",level:2},{value:"The Pulling Workflow",id:"the-pulling-workflow",level:3}];function u(e){const t={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["The Subscriber is the most complicated component in KanthorQ system, but that complexity serves only one purpose: get your a task to work on it then try to get your task moves to ",(0,o.jsx)(t.strong,{children:"Final State"}),". If something went wrong with your task, you can ask for retry both manually or automatically from the Subscriber."]}),"\n",(0,o.jsx)(t.h2,{id:"workflows",children:"Workflows"}),"\n",(0,o.jsx)(t.p,{children:"The Subscriber workflows will contains two parts: the pulling workflow that help you get tasks for your works and the updating workflow that help you update your task state after you have done with it"}),"\n",(0,o.jsx)(t.h3,{id:"the-pulling-workflow",children:"The Pulling Workflow"}),"\n",(0,o.jsx)(t.mermaid,{value:"---\ntitle: Pulling flow\n---\nsequenceDiagram\n  Subscriber ->> +Consumer Registry: name: send_cancellation_email\n\n  rect rgb(191, 223, 255)\n  note right of Subscriber: Transaction Box\n\n  Consumer Registry ->> -kanthorq_stream_order_update: topic: order.cancelled, cursor: evt_01J36ZJACKR5FXDWVKASC4BNCN, limit: 100\n\n  kanthorq_stream_order_update ->> kanthorq_stream_order_update: scanning\n  kanthorq_stream_order_update ->> +send_cancellation_email: events\n  send_cancellation_email -> -send_cancellation_email: convert events to tasks\n\n  send_cancellation_email --\x3e> +Subscriber: 100 tasks\n  Subscriber ->> -Consumer Registry: next_cursor: evt_01J3702FVA6EJ7QB7CNRMCP93B\n\n  end"}),"\n",(0,o.jsxs)(t.p,{children:["Not like Publish only works with one component - the Stream, the Subscriber needs to interact with two components: the Stream and the Consumer. It will work with the Stream to help convert events from a stream to a task in a consumer, then it pulls those tasks for you. The ",(0,o.jsx)(t.em,{children:"Transaction Box"})," indicates that all actions will be run in a transcation, so that we can guarantee pulling a task exactly once."]}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"We will start with a request to ask for 100 tasks."}),"\n",(0,o.jsx)(t.li,{children:"We need to work with the Consumer Registry to get a stream name, a topic and a cursor of previous scanning in the Stream."}),"\n",(0,o.jsx)(t.li,{children:"Put all parameters together we will scan the Stream to look for matching events with given topic."}),"\n",(0,o.jsx)(t.li,{children:"After find events, we start converting those events to tasks by insert them into our Consumer then return those tasks back to our Subscriber."}),"\n",(0,o.jsx)(t.li,{children:"Because a task is belong to only one event, so we also know what is the next cursor is (the latest task contains the latest matching event), so will update that cursor back to our Consumer Registry"}),"\n"]}),"\n",(0,o.jsxs)(t.admonition,{type:"info",children:[(0,o.jsxs)(t.p,{children:["By saying ",(0,o.jsx)(t.strong,{children:"scanning"}),", we mean we will query events from a stream from the lower bound that is specify by the ",(0,o.jsx)(t.strong,{children:"cursor"})," until we get enough rows (100 events). The simplify query will look like"]}),(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-sql",children:"SELECT * FROM kanthorq_stream_order_update WHERE id > 'evt_01J36ZJACKR5FXDWVKASC4BNCN' LIMIT 100\n"})})]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var o=n(6540);const r={},s=o.createContext(r);function a(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);